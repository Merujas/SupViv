from ursina import *
import math

# Función principal del juego
def main():
    global ground, cube, camera_rotation_angle_x, camera_rotation_angle_y, update

    # Inicializar Ursina Engine
    app = Ursina()

    # Crear un suelo 3D
    ground = Entity(
        model='plane',
        texture='grass',
        scale=(10, 1, 10),
        collider='box'
    )

    # Crear un jugador 2D
    player_texture = load_texture('Player.png')
    player = Entity(
        model='quad',
        texture=player_texture,
        scale=(1, 2, 1),
        collider='box',
        position=(0, 1, 0),
        billboard=True  # El objeto siempre mira hacia la cámara
    )

    # Crear un objeto 3D
    cube = Entity(
        model='cube',
        color=color.red,
        scale=(1, 1, 1),
        position=(2, 1, 0)
    )

    # Configurar la cámara
    camera.position = (0, 10, -10)  # Eleva la cámara y colócala detrás del jugador
    camera.rotation = (45, 0, 0)   # Inclina la cámara hacia abajo

    # Variables para controlar la rotación de la cámara
    camera_rotation_angle_x = 0
    camera_rotation_angle_y = 0

    # Función de actualización
    def update():
        global camera_rotation_angle_x, camera_rotation_angle_y

        # Movimiento del jugador
        if held_keys['d']:
            player.x += 4 * time.dt
        if held_keys['a']:
            player.x -= 4 * time.dt
        if held_keys['w']:
            player.z += 4 * time.dt
        if held_keys['s']:
            player.z -= 4 * time.dt

        # Rotar la cámara con el mouse (manteniendo presionado el botón derecho)
        if held_keys['right mouse']:
            camera_rotation_angle_x += mouse.velocity[0] * 1000 * time.dt
            camera_rotation_angle_y -= mouse.velocity[1] * 1000 * time.dt

            # Limitar la rotación vertical para evitar que la cámara gire completamente
            camera_rotation_angle_y = max(-90, min(90, camera_rotation_angle_y))

        # Aplicar la rotación de la cámara
        radius = 10
        camera.x = player.x + radius * math.cos(math.radians(camera_rotation_angle_x))
        camera.z = player.z + radius * math.sin(math.radians(camera_rotation_angle_x))
        camera.y = player.y + radius * math.sin(math.radians(camera_rotation_angle_y))
        camera.look_at(player)

    # Ejecutar el bucle principal del juego
    app.run()

# Llamar a la función principal
if __name__ == '__main__':
    main()